// Mock API Service for Development
// This simulates real API responses when the actual backend is not available

import { DiseaseAnalysisResult, ChatMessage, WeatherData, CropRecommendation, CommunityPost, CreatePostRequest, PostResponse } from './api';

// Simulate API delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// Mock disease detection responses
const mockDiseases = [
  {
    disease: "рдкрддреНрддреА рдХрд╛ рдзрдмреНрдмрд╛ рд░реЛрдЧ (Leaf Spot Disease)",
    confidence: 92,
    severity: "medium" as const,
    recommendations: [
      "рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рддреБрд░рдВрдд рд╣рдЯрд╛ рджреЗрдВ",
      "рдХреЙрдкрд░ рдСрдХреНрд╕реАрдХреНрд▓реЛрд░рд╛рдЗрдб рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ",
      "рдиреАрдо рддреЗрд▓ рдХрд╛ рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдЪрд╛рд░ рдХрд░реЗрдВ",
      "рдЦреЗрдд рдореЗрдВ рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ"
    ],
    preventiveMeasures: [
      "рдмреАрдЬ рдЙрдкрдЪрд╛рд░ рдХрд░реЗрдВ",
      "рдЙрдЪрд┐рдд рджреВрд░реА рдкрд░ рдмреБрдЖрдИ рдХрд░реЗрдВ",
      "рдЦреЗрдд рдХреА рд╕рдлрд╛рдИ рд░рдЦреЗрдВ",
      "рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ"
    ],
    treatment: [
      "рдореИрдирдХреЛрдЬрд╝реЗрдм 75% WP рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡",
      "рдХрд╛рд░реНрдмреЗрдиреНрдбрд╛рдЬрд┐рдо 50% WP рдХрд╛ рдЙрдкрдпреЛрдЧ",
      "рдкреНрд░реЛрдкрд┐рдХреЛрдирд╛рдЬреЛрд▓ 25% EC рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡"
    ],
    scientificName: "Alternaria solani",
    symptoms: [
      "рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рднреВрд░реЗ рдзрдмреНрдмреЗ",
      "рдзрдмреНрдмреЛрдВ рдХреЗ рдЪрд╛рд░реЛрдВ рдУрд░ рдкреАрд▓рд╛ рдШреЗрд░рд╛",
      "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рд╕реВрдЦрдирд╛",
      "рдлрд▓реЛрдВ рдкрд░ рднреА рдзрдмреНрдмреЗ"
    ]
  },
  {
    disease: "рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╡рд┐рд▓реНрдЯ (Bacterial Wilt)",
    confidence: 87,
    severity: "high" as const,
    recommendations: [
      "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рдЬрдбрд╝ рд╕реЗ рдЙрдЦрд╛рдбрд╝ рджреЗрдВ",
      "рдЦреЗрдд рдХреЛ 2-3 рд╕рд╛рд▓ рдХреЗ рд▓рд┐рдП рдЦрд╛рд▓реА рд░рдЦреЗрдВ",
      "рдмреАрдЬ рдХреЛ рдЧрд░реНрдо рдкрд╛рдиреА рд╕реЗ рдЙрдкрдЪрд╛рд░рд┐рдд рдХрд░реЗрдВ",
      "рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░реЗрдВ"
    ],
    preventiveMeasures: [
      "рд░реЛрдЧ рдкреНрд░рддрд┐рд░реЛрдзреА рдХрд┐рд╕реНрдореЗрдВ рдмреЛрдПрдВ",
      "рд╕реНрд╡рд╕реНрде рдмреАрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
      "рдЦреЗрдд рдХреА рд╕рдлрд╛рдИ рд░рдЦреЗрдВ",
      "рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ"
    ],
    treatment: [
      "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХрд╛ рддреБрд░рдВрдд рдирд┐рд╖реНрдХрд╛рд╕рди",
      "рдЦреЗрдд рдХреА рдорд┐рдЯреНрдЯреА рдХрд╛ рд╕реМрд░ рдЙрдкрдЪрд╛рд░",
      "рдЬреИрд╡рд┐рдХ рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдЙрдкрдпреЛрдЧ"
    ],
    scientificName: "Ralstonia solanacearum",
    symptoms: [
      "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рдореБрд░рдЭрд╛рдирд╛",
      "рддрдиреЗ рдХрд╛ рдХрд╛рд▓рд╛ рдкрдбрд╝рдирд╛",
      "рдЬрдбрд╝реЛрдВ рдХрд╛ рд╕рдбрд╝рдирд╛",
      "рдкреМрдзреЗ рдХрд╛ рдЕрдЪрд╛рдирдХ рдорд░рдирд╛"
    ]
  },
  {
    disease: "рдкрд╛рдЙрдбрд░реА рдорд┐рд▓реНрдбреНрдпреВ (Powdery Mildew)",
    confidence: 95,
    severity: "low" as const,
    recommendations: [
      "рд╕рд▓реНрдлрд░ рдпреБрдХреНрдд рдХрд╡рдХрдирд╛рд╢реА рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ",
      "рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рд╣рд╡рд╛ рдХрд╛ рдкреНрд░рд╡рд╛рд╣ рдмрдврд╝рд╛рдПрдВ",
      "рд╕реБрдмрд╣ рдХреЗ рд╕рдордп рдкрд╛рдиреА рджреЗрдВ",
      "рд╕рдВрдХреНрд░рдорд┐рдд рднрд╛рдЧреЛрдВ рдХреЛ рдХрд╛рдЯ рджреЗрдВ"
    ],
    preventiveMeasures: [
      "рдЙрдЪрд┐рдд рджреВрд░реА рдкрд░ рдкреМрдзреЗ рд▓рдЧрд╛рдПрдВ",
      "рд╕реБрдмрд╣ рдХреЗ рд╕рдордп рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ",
      "рдкреМрдзреЛрдВ рдХреЛ рдЫрд╛рдпрд╛ рдореЗрдВ рд░рдЦреЗрдВ",
      "рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдорд╛рддреНрд░рд╛ рдХрдо рдХрд░реЗрдВ"
    ],
    treatment: [
      "рд╕рд▓реНрдлрд░ 80% WP рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡",
      "рдЯреНрд░рд╛рдпрдбрд┐рдореЗрдлреЙрди 25% WP рдХрд╛ рдЙрдкрдпреЛрдЧ",
      "рд╣реЗрдХреНрд╕рд╛рдХреЛрдирд╛рдЬреЛрд▓ 5% EC рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡"
    ],
    scientificName: "Erysiphe cichoracearum",
    symptoms: [
      "рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рд╕рдлреЗрдж рдкрд╛рдЙрдбрд░",
      "рдкрддреНрддрд┐рдпреЛрдВ рдХрд╛ рдкреАрд▓рд╛ рдкрдбрд╝рдирд╛",
      "рдлреВрд▓реЛрдВ рдХрд╛ рд╡рд┐рдХреГрдд рд╣реЛрдирд╛",
      "рдлрд▓реЛрдВ рдХрд╛ рдЫреЛрдЯрд╛ рд░рд╣ рдЬрд╛рдирд╛"
    ]
  }
];

// Mock community posts data
const mockCommunityPosts: CommunityPost[] = [
  {
    id: "1",
    author: "рд░рд╛рдо рдХреБрдорд╛рд░",
    location: "рдкрдВрдЬрд╛рдм",
    time: "2 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ",
    content: "рдореЗрд░реЗ рдЧреЗрд╣реВрдВ рдХреА рдлрд╕рд▓ рдореЗрдВ рдкреАрд▓реЗ рдзрдмреНрдмреЗ рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВред рдХреНрдпрд╛ рдпрд╣ рдХреЛрдИ рдмреАрдорд╛рд░реА рд╣реИ? рдХреГрдкрдпрд╛ рд╕реБрдЭрд╛рд╡ рджреЗрдВред",
    image: "ЁЯМ╛",
    likes: 12,
    comments: 5,
    agriCreds: 25,
    category: "community.category.problem",
    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
    userId: "user1"
  },
  {
    id: "2",
    author: "рд╕реБрдиреАрддрд╛ рджреЗрд╡реА",
    location: "рд╣рд░рд┐рдпрд╛рдгрд╛",
    time: "4 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ",
    content: "рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдмрдирд╛рдиреЗ рдХрд╛ рдЖрд╕рд╛рди рддрд░реАрдХрд╛ред рдЧреЛрдмрд░ + рдиреАрдо рдХреА рдкрддреНрддреА + рдЧреБрдбрд╝ рдорд┐рд▓рд╛рдХрд░ 15 рджрд┐рди рдореЗрдВ рддреИрдпрд╛рд░ рд╣реЛрддреА рд╣реИред",
    image: "ЁЯМ▒",
    likes: 28,
    comments: 8,
    agriCreds: 50,
    category: "community.category.tips",
    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),
    userId: "user2"
  },
  {
    id: "3",
    author: "рдЕрдЬрдп рд╕рд┐рдВрд╣",
    location: "рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢", 
    time: "6 рдШрдВрдЯреЗ рдкрд╣рд▓реЗ",
    content: "рдбреНрд░рд┐рдк рд╕рд┐рдВрдЪрд╛рдИ рд▓рдЧрд╛рдиреЗ рдХреЗ рдмрд╛рдж 40% рдкрд╛рдиреА рдХреА рдмрдЪрдд рд╣реБрдИред рдмрд╣реБрдд рдлрд╛рдпрджреЗрдордВрдж рд╣реИ!",
    image: "ЁЯТз",
    likes: 35,
    comments: 12,
    agriCreds: 75,
    category: "community.category.experience",
    timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000),
    userId: "user3"
  }
];

// Mock chatbot responses
const mockChatResponses = {
  hindi: {
    "рдЯрдорд╛рдЯрд░": "рдЯрдорд╛рдЯрд░ рдХреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдХреБрдЫ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реБрдЭрд╛рд╡:\n\nтАв рдмреАрдЬ рдмреЛрдиреЗ рдХрд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рд╕рдордп: рдлрд░рд╡рд░реА-рдорд╛рд░реНрдЪ рдпрд╛ рдЬреБрд▓рд╛рдИ-рдЕрдЧрд╕реНрдд\nтАв рдорд┐рдЯреНрдЯреА: рджреЛрдордЯ рдорд┐рдЯреНрдЯреА рд╕рдмрд╕реЗ рдЙрдкрдпреБрдХреНрдд\nтАв рд╕рд┐рдВрдЪрд╛рдИ: рд╣рд▓реНрдХреА рдФрд░ рдирд┐рдпрдорд┐рдд\nтАв рдЦрд╛рдж: NPK 20:20:20 рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг: рдиреАрдо рддреЗрд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ",
    "рдЧреЗрд╣реВрдВ": "рдЧреЗрд╣реВрдВ рдХреА рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡:\n\nтАв рдмреБрдЖрдИ рдХрд╛ рд╕рдордп: рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░\nтАв рдорд┐рдЯреНрдЯреА: рджреЛрдордЯ рд╕реЗ рднрд╛рд░реА рджреЛрдордЯ\nтАв рд╕рд┐рдВрдЪрд╛рдИ: 3-4 рдмрд╛рд░ (рдмреБрдЖрдИ, рдЯрд┐рд▓рд░рд┐рдВрдЧ, рдлреВрд▓ рдЖрдиреЗ рдкрд░)\nтАв рдЦрд╛рдж: рдпреВрд░рд┐рдпрд╛ 120kg/рд╣реЗрдХреНрдЯреЗрдпрд░\nтАв рдХрдЯрд╛рдИ: рдЬрдм рдкреМрдзреЗ рдкреАрд▓реЗ рд╣реЛ рдЬрд╛рдПрдВ",
    "рдореМрд╕рдо": "рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдХреГрд╖рд┐ рдХреЗ рд▓рд┐рдП рдЕрдиреБрдХреВрд▓ рд╣реИред рддрд╛рдкрдорд╛рди 25-30┬░C рдХреЗ рдмреАрдЪ рд╣реИред рд╣рд▓реНрдХреА рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред рдлрд╕рд▓реЛрдВ рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдХрдо рдХрд░реЗрдВ рдФрд░ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд░рд╣реЗрдВред",
    "рдЦрд╛рдж": "рдлрд╕рд▓ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЦрд╛рдж рдХреА рдорд╛рддреНрд░рд╛:\n\nтАв рдзрд╛рди: NPK 120:60:60 kg/ha\nтАв рдЧреЗрд╣реВрдВ: NPK 120:60:40 kg/ha\nтАв рдордХреНрдХрд╛: NPK 150:75:75 kg/ha\nтАв рд╕реЛрдпрд╛рдмреАрди: NPK 20:80:40 kg/ha\n\nрдЦрд╛рдж рдмреБрдЖрдИ рдХреЗ рд╕рдордп рдФрд░ рдЯреЙрдк рдбреНрд░реЗрд╕рд┐рдВрдЧ рдореЗрдВ рджреЗрдВред",
    "default": "рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ? рдЖрдк рдлрд╕рд▓, рдореМрд╕рдо, рдЦрд╛рдж, рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг рдпрд╛ рдХрд┐рд╕реА рдЕрдиреНрдп рдХреГрд╖рд┐ рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред"
  },
  english: {
    "tomato": "Here are some important tips for tomato farming:\n\nтАв Best time to sow: February-March or July-August\nтАв Soil: Loamy soil is most suitable\nтАв Irrigation: Light and regular\nтАв Fertilizer: Use NPK 20:20:20\nтАв Pest control: Spray neem oil",
    "wheat": "Suggestions for wheat farming:\n\nтАв Sowing time: November-December\nтАв Soil: Loamy to heavy loamy\nтАв Irrigation: 3-4 times (sowing, tillering, flowering)\nтАв Fertilizer: Urea 120kg/hectare\nтАв Harvesting: When plants turn yellow",
    "weather": "Today's weather is favorable for agriculture. Temperature is between 25-30┬░C. Light rain is expected. Reduce crop irrigation and be prepared for pest control.",
    "fertilizer": "Fertilizer quantity according to crop:\n\nтАв Rice: NPK 120:60:60 kg/ha\nтАв Wheat: NPK 120:60:40 kg/ha\nтАв Maize: NPK 150:75:75 kg/ha\nтАв Soybean: NPK 20:80:40 kg/ha\n\nApply fertilizer at sowing time and top dressing.",
    "default": "How can I help you? You can ask about crops, weather, fertilizers, pest control, or any other agricultural problem."
  }
};

export class MockApiService {
  async analyzeDisease(imageData: string, cropType?: string): Promise<DiseaseAnalysisResult> {
    await delay(2000 + Math.random() * 1000); // 2-3 seconds
    
    // Simulate different responses based on crop type
    const cropIndex = cropType ? cropType.length % mockDiseases.length : Math.floor(Math.random() * mockDiseases.length);
    return mockDiseases[cropIndex];
  }

  async sendChatMessage(message: string, context?: any): Promise<ChatMessage> {
    await delay(1000 + Math.random() * 2000); // 1-3 seconds
    
    const language = context?.language || 'hindi';
    const responses = mockChatResponses[language as keyof typeof mockChatResponses];
    
    // Simple keyword matching
    let response = responses.default;
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('рдЯрдорд╛рдЯрд░') || lowerMessage.includes('tomato')) {
      response = language === 'hindi' ? (responses as any).рдЯрдорд╛рдЯрд░ : (responses as any).tomato || responses.default;
    } else if (lowerMessage.includes('рдЧреЗрд╣реВрдВ') || lowerMessage.includes('wheat')) {
      response = language === 'hindi' ? (responses as any).рдЧреЗрд╣реВрдВ : (responses as any).wheat || responses.default;
    } else if (lowerMessage.includes('рдореМрд╕рдо') || lowerMessage.includes('weather')) {
      response = language === 'hindi' ? (responses as any).рдореМрд╕рдо : (responses as any).weather || responses.default;
    } else if (lowerMessage.includes('рдЦрд╛рдж') || lowerMessage.includes('fertilizer')) {
      response = language === 'hindi' ? (responses as any).рдЦрд╛рдж : (responses as any).fertilizer || responses.default;
    }
    
    return {
      id: Date.now().toString(),
      sender: 'bot',
      content: response,
      timestamp: new Date(),
      type: 'text'
    };
  }

  async getWeatherData(latitude: number, longitude: number): Promise<WeatherData> {
    await delay(500);
    
    return {
      temperature: 28 + Math.random() * 8,
      humidity: 60 + Math.random() * 30,
      windSpeed: 5 + Math.random() * 15,
      description: "Partly cloudy with light rain",
      icon: "cloud-rain",
      forecast: [
        { date: "2024-01-15", temp: 26, description: "Sunny" },
        { date: "2024-01-16", temp: 24, description: "Cloudy" },
        { date: "2024-01-17", temp: 27, description: "Partly cloudy" }
      ]
    };
  }

  async getCropRecommendations(soilType: string, season: string, location: string): Promise<CropRecommendation[]> {
    await delay(1000);
    
    return [
      {
        crop: "рдЧреЗрд╣реВрдВ (Wheat)",
        confidence: 95,
        reasons: ["рдЙрдкрдпреБрдХреНрдд рдореМрд╕рдо", "рдЕрдЪреНрдЫреА рдорд┐рдЯреНрдЯреА", "рдкрд╛рдиреА рдХреА рдЙрдкрд▓рдмреНрдзрддрд╛"],
        plantingTime: "рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░",
        careInstructions: ["рдирд┐рдпрдорд┐рдд рд╕рд┐рдВрдЪрд╛рдИ", "рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ", "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг"]
      },
      {
        crop: "рд╕рд░рд╕реЛрдВ (Mustard)",
        confidence: 88,
        reasons: ["рдардВрдбрд╛ рдореМрд╕рдо", "рдХрдо рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛"],
        plantingTime: "рдЕрдХреНрдЯреВрдмрд░-рдирд╡рдВрдмрд░",
        careInstructions: ["рд╣рд▓реНрдХреА рд╕рд┐рдВрдЪрд╛рдИ", "рдЬреИрд╡рд┐рдХ рдЦрд╛рдж", "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг"]
      }
    ];
  }

  async getAvailableExperts(): Promise<any[]> {
    await delay(500);
    
    return [
      {
        id: "1",
        name: "рдбреЙ. рд╕реБрд░реЗрд╢ рдХреБрдорд╛рд░",
        specialty: "рдкрд╛рджрдк рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ",
        rating: 4.8,
        available: true,
        price: "тВ╣50/10 рдорд┐рдирдЯ",
        experience: "15+ years",
        languages: ["Hindi", "English"]
      },
      {
        id: "2",
        name: "рд░рд╛рдЬреНрдпрд╛ рд▓рдХреНрд╖реНрдореА",
        specialty: "рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рд╕рд▓рд╛рд╣рдХрд╛рд░",
        rating: 4.9,
        available: false,
        nextAvailable: "2:00 PM",
        experience: "12+ years",
        languages: ["Hindi", "Telugu"]
      }
    ];
  }

  // Community API Methods
  async getCommunityPosts(category?: string, limit: number = 20): Promise<CommunityPost[]> {
    await delay(800);
    
    let filteredPosts = [...mockCommunityPosts];
    
    if (category) {
      filteredPosts = filteredPosts.filter(post => post.category === category);
    }
    
    return filteredPosts.slice(0, limit);
  }

  async createCommunityPost(postData: CreatePostRequest): Promise<PostResponse> {
    await delay(1500);
    
    const newPost: CommunityPost = {
      id: (mockCommunityPosts.length + 1).toString(),
      author: "рдЖрдк",
      location: postData.location || "рдЖрдкрдХрд╛ рд╕реНрдерд╛рди",
      time: "рдЕрднреА",
      content: postData.content,
      image: postData.image,
      likes: 0,
      comments: 0,
      agriCreds: 10,
      category: postData.category,
      timestamp: new Date(),
      userId: postData.userId || "current_user"
    };
    
    // Add to mock data
    mockCommunityPosts.unshift(newPost);
    
    return {
      success: true,
      post: newPost,
      message: "рдкреЛрд╕реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛рдИ рдЧрдИ!"
    };
  }

  async likeCommunityPost(postId: string, userId: string): Promise<{ success: boolean; likes: number }> {
    await delay(500);
    
    const post = mockCommunityPosts.find(p => p.id === postId);
    if (post) {
      post.likes += 1;
      return { success: true, likes: post.likes };
    }
    
    return { success: false, likes: 0 };
  }

  async addCommentToPost(postId: string, comment: string, userId: string): Promise<any> {
    await delay(800);
    
    const post = mockCommunityPosts.find(p => p.id === postId);
    if (post) {
      post.comments += 1;
      return {
        success: true,
        comment: {
          id: Date.now().toString(),
          content: comment,
          author: "рдЖрдк",
          timestamp: new Date()
        }
      };
    }
    
    return { success: false };
  }

  async uploadCommunityImage(imageData: string, fileName: string): Promise<{ imageUrl: string }> {
    await delay(2000);
    
    // Simulate image upload and return a mock URL
    return {
      imageUrl: `https://mock-storage.agrisathi.com/community/${Date.now()}_${fileName}`
    };
  }
}

export class MockAiService {
  async advancedDiseaseDetection(imageData: string): Promise<DiseaseAnalysisResult> {
    await delay(3000 + Math.random() * 2000); // 3-5 seconds for advanced analysis
    
    // Simulate more accurate results
    const baseDisease = mockDiseases[Math.floor(Math.random() * mockDiseases.length)];
    return {
      ...baseDisease,
      confidence: Math.min(100, baseDisease.confidence + 5 + Math.random() * 10)
    };
  }

  async processNaturalLanguage(text: string, language: string = 'hindi'): Promise<any> {
    await delay(500);
    
    return {
      intent: "agriculture_question",
      entities: ["crop", "disease", "weather"],
      confidence: 0.85,
      language: language
    };
  }

  async preprocessImage(imageData: string): Promise<string> {
    await delay(1000);
    
    // Return the same image (in real implementation, this would enhance the image)
    return imageData;
  }
} 